{"version":3,"sources":["Badges.js","dummyData.js","Friends.js","LifetimeStats.js","TimeSeriesBarChart.jsx","api.js","Dashboard.js","App.js","registerServiceWorker.js","index.js"],"names":["Badges","badges","className","map","badge","i","key","shortName","src","image100px","alt","description","timesAchieved","dateTime","dummyData","user","loggedIn","lifetimeStats","steps","distance","friends","Friends","length","friend","average","avatar","style","height","left","borderRadius","displayName","LifetimeStats","lifetime","total","best","value","date","TimeSeriesBarChart","data","title","yMax","width","margin","top","right","bottom","dataKey","domain","strokeDasharray","fill","authorizeParams","response_type","client_id","redirect_url","scope","Object","entries","activity","heartrate","location","nutrition","profile","settings","sleep","social","weight","reduce","acc","push","join","expires_in","authorizeUrl","queryString","stringify","Dashboard","props","state","url","fitbitToken","stateKey","axios","method","headers","Authorization","mode","then","response","console","log","setState","catch","error","window","hash","URLSearchParams","get","this","fetchFitbitData","href","JSON","undefined","Component","App","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.eda88aef.chunk.js","sourcesContent":["import React from 'react'\n\nconst Badges = ({badges}) =>\n  <div className=\"panel panel-default\">\n    <div className=\"panel-heading\">\n      <h4>Badges</h4>\n    </div>\n    <div className=\"panel-body\">\n      {badges.badges.map((badge, i) => {\n        return(\n          <div key={i}>\n            <h5>{badge.shortName}</h5>\n            <p><img src={badge.image100px} alt=\"\" /></p>\n            <p>{badge.description}</p>\n            <p>Earned {badge.timesAchieved} times</p>\n            <p>Last on {badge.dateTime}</p>\n          </div>\n        )\n      })}\n    </div>\n  </div>\n\nexport default Badges","const dummyData = {\n  user: {user: ''},\n  loggedIn: false,\n  lifetimeStats: {\n    'best': {\n      'total': {\n        'distance': {\n          'date': '',\n          'value': ''\n        },\n        'steps': {\n          'date': '',\n          'value': ''\n        }\n      }\n    },\n    'lifetime': {\n      'total': {\n        'distance': '',\n        'steps': ''\n      }\n    }\n  },\n  badges: {\n    'badges': []\n  },\n  steps: {'activities-steps': []},\n  distance: {'activities-distance': []},\n  friends: {'friends': []}\n}\n\nexport default dummyData","import React from 'react';\n\nconst Friends = ({ friends }) => (\n  <div className=\"panel panel-default\">\n    <div className=\"panel-heading\">\n      <h4>Friends</h4>\n    </div>\n    <div className=\"panel-body\">\n      {friends.length === 0 &&\n        <p>you have no friends :(</p>\n      }\n      {friends.map((friend, i) => {\n        return (\n          <div key={i} className=\"list-group-item\">\n            <span className=\"badge\">{friend.average.steps}</span>\n            <img\n              src={friend.user.avatar}\n              style={{ height: 50, left: 10, borderRadius: '50%' }}\n              alt=\"\"\n            />\n            <h4>{friend.user.displayName}</h4>\n          </div>\n        );\n      })}\n    </div>\n  </div>\n);\n\nexport default Friends;\n","import React from 'react'\n\nconst LifetimeStats = ({lifetimeStats}) =>\n  <div className=\"panel panel-default\">\n    <div className=\"panel-heading\">\n      <h4>Lifetime Stats</h4>\n    </div>\n    <div className=\"panel-body\">\n      <h4>Distance</h4>\n      <p>Total: {lifetimeStats.lifetime.total.distance}</p>\n      <p>Best: {lifetimeStats.best.total.distance.value} on {lifetimeStats.best.total.distance.date}</p>\n      <h4>Steps</h4>\n      <p>Total: {lifetimeStats.lifetime.total.steps}</p>\n      <p>Best: {lifetimeStats.best.total.steps.value} on {lifetimeStats.best.total.steps.date}</p>\n    </div>\n  </div>\n\nexport default LifetimeStats","import React from 'react'\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts'\n\nconst TimeSeriesBarChart = ({data, title, yMax}) =>\n  <div className=\"panel panel-default\">\n    <div className=\"panel-heading\">{title}</div>\n    <div className=\"panel-body\">\n      <BarChart width={500} height={300} data={data}\n                margin={{top: 5, right: 30, left: 20, bottom: 5}}>\n        <XAxis dataKey=\"dateTime\"/>\n        <YAxis domain={[0, yMax]}/>\n        <CartesianGrid strokeDasharray=\"3 3\"/>\n        <Tooltip/>\n        <Bar dataKey=\"value\" fill=\"#8884d8\" />\n      </BarChart>\n    </div>\n  </div>\n\nexport default TimeSeriesBarChart","import queryString from 'query-string';\n\n// set keys to false if you don't want have to have access to certain scopes\nconst scopes = {\n  activity: true,\n  heartrate: true,\n  location: true,\n  nutrition: true,\n  profile: true,\n  settings: true,\n  sleep: true,\n  social: true,\n  weight: true\n};\n\nconst scopeStr = Object.entries(scopes)\n  .reduce((acc, [scope, enabled]) => {\n    if (enabled) {\n      acc.push(scope);\n    }\n\n    return acc;\n  }, [])\n  .join('%20');\n\nconst authorizeParams = {\n  response_type: 'token',\n  client_id: '22BBTX',\n  redirect_url: 'http://localhost:3000/', // where to redirect after logging in\n  scope: scopeStr,\n  expires_in: 31536000\n};\n\nexport const authorizeUrl = `https://www.fitbit.com/oauth2/authorize?${queryString.stringify(\n  authorizeParams\n)}`;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Badges from './Badges';\nimport dummyData from './dummyData';\nimport Friends from './Friends';\nimport LifetimeStats from './LifetimeStats';\nimport TimeSeriesBarChart from './TimeSeriesBarChart';\nimport { authorizeUrl } from './api';\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = dummyData;\n  }\n\n  fetchFitbitData(url, fitbitToken, stateKey) {\n    axios({\n      method: 'get',\n      url: 'https://api.fitbit.com/1.2/user/-/' + url,\n      headers: { Authorization: 'Bearer ' + fitbitToken },\n      mode: 'cors'\n    })\n      .then(response => {\n        console.log(url, response.data);\n        this.setState({ [stateKey || url]: response.data });\n      })\n      .catch(error => console.log(error));\n  }\n\n  componentDidMount() {\n    if (window.location.hash) {\n      const urlParams = new URLSearchParams(window.location.hash);\n      const fitbitToken = urlParams.get('#access_token');\n\n      this.setState({ loggedIn: true });\n\n      this.fetchFitbitData('profile.json', fitbitToken, 'user');\n      this.fetchFitbitData('activities.json', fitbitToken, 'lifetimeStats');\n      this.fetchFitbitData('badges.json', fitbitToken, 'badges');\n      this.fetchFitbitData(\n        'activities/steps/date/today/1m.json',\n        fitbitToken,\n        'steps'\n      );\n      this.fetchFitbitData(\n        'activities/distance/date/today/1m.json',\n        fitbitToken,\n        'distance'\n      );\n      this.fetchFitbitData('friends.json', fitbitToken);\n      this.fetchFitbitData('/sleep/date/2019-12-31.json', fitbitToken);\n      this.fetchFitbitData('/sleep/goal.json', fitbitToken);\n      this.fetchFitbitData(\n        '/sleep/date/2019-11-01/2019-12-01.json',\n        fitbitToken\n      );\n      this.fetchFitbitData('/activities/date/2019-11-17.json', fitbitToken);\n      this.fetchFitbitData('devices.json', fitbitToken);\n\n      // GET https://api.fitbit.com/1/user/-/devices.json\n\n      // GET https://api.fitbit.com/1/user/[user-id]/activities/date/[date].json\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <header className=\"text-center\">\n          <span className=\"pull-right\">{this.state.user.user.displayName}</span>\n          <h1 className=\"page-header\">React Fit</h1>\n          <p className=\"lead\">Your personal fitness dashboard</p>\n        </header>\n\n        {!this.state.loggedIn && (\n          <div className=\"row text-center\">\n            <a href={authorizeUrl}>Log in with fitbit</a>\n          </div>\n        )}\n\n        <div className=\"row\">\n          <div className=\"col-lg-3\">\n            <LifetimeStats lifetimeStats={this.state.lifetimeStats} />\n            <Badges badges={this.state.badges} />\n          </div>\n\n          <div className=\"col-lg-6\">\n            <TimeSeriesBarChart\n              data={this.state.steps['activities-steps']}\n              title=\"Steps\"\n              yMax={1000}\n            />\n            <TimeSeriesBarChart\n              data={this.state.distance['activities-distance']}\n              title=\"Distance (kilometers)\"\n              yMax={2}\n            />\n          </div>\n\n          <div className=\"col-lg-2 col-lg-offset-1\">\n            <Friends friends={this.state.friends.friends} />\n          </div>\n        </div>\n        <pre>{JSON.stringify(this.state, undefined, 2)}</pre>\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React, { Component } from 'react';\nimport Dashboard from './Dashboard';\n\nclass App extends Component {\n  render() {\n    return (\n      <Dashboard />\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}